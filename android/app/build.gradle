plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'dev.flutter.flutter-gradle-plugin'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdk 35
    namespace 'ja.burhanrashid52.whattodo'

    ndkVersion '26.3.11579264'

    lint {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId 'ja.burhanrashid52.whattodo'
        minSdk flutter.minSdkVersion
        targetSdk 34
        versionCode 6
        versionName '1.0.6'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            } else {
                print('not signed')
            }
        }
    }

    buildTypes {
        release {
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            }
            minifyEnabled false
            shrinkResources false

            applicationVariants.configureEach { variant ->
                variant.outputs.configureEach { output ->
                    outputFileName = "app-release.apk"
                }
            }
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

flutter {
    source '../..'
}

dependencies {
    // Test dependencies
    testImplementation 'junit:junit:4.13.2'  // Updated to latest stable version
    androidTestImplementation 'androidx.test:runner:1.5.2'  // Updated to latest stable version
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    // Updated to latest stable version

    // Kotlin standard library (recommended for Kotlin projects)
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.9.24'
}

